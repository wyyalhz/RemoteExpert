name: Build & Release

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build Linux image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: docker/build/build_linux.Dockerfile
        push: false
        tags: local/remote-expert-linux:ci
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
    - name: Build and package in container
      run: |
        docker run --rm -v "${{ github.workspace }}:/workspace" local/remote-expert-linux:ci \
          bash -lc "cd /workspace && chmod +x ./scripts/*.sh && ./scripts/build_linux.sh && ./scripts/package_linux.sh"
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-package
        path: dist/*linux-x86_64.tar.gz

  build-windows:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build MXE image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: docker/build/build_windows-mxe.Dockerfile
        push: false
        tags: local/remote-expert-mxe:ci
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
    - name: Build and package in container (MXE)
      run: |
        docker run --rm -v "${{ github.workspace }}:/workspace" local/remote-expert-mxe:ci \
          bash -lc "cd /workspace && chmod +x ./scripts/*.sh && ./scripts/build_windows_mxe.sh && ./scripts/package_windows.sh"
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-package
        path: dist/*windows-x86_64.zip

  release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]
    if: github.ref == 'refs/heads/master'
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    - name: Collect artifacts into dist/
      run: |
        mkdir -p dist
        find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec cp -f {} dist/ \;
        ls -al dist || true
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    - name: Install dependencies
      run: npm ci
    - name: Semantic Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: npx semantic-release